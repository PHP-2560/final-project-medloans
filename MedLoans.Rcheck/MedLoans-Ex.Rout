
R version 3.5.1 (2018-07-02) -- "Feather Spray"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "MedLoans"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "MedLoans-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('MedLoans')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("forgiveness.prep.fund")
> ### * forgiveness.prep.fund
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: forgiveness.prep.fund
> ### Title: A Forgiveness Tax Bill Function
> ### Aliases: forgiveness.prep.fund
> ### Keywords: debt debt, forgiveness tax,
> 
> ### ** Examples
> 
> forgiveness.prep.fund(545732.1, .05, .35, 5, years=20, print.saved=1)
[1] 182726
[1] 8064.708
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("forgiveness.prep.fund", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("grow")
> ### * grow
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: grow
> ### Title: A Growth Function
> ### Aliases: grow
> ### Keywords: growth, interest
> 
> ### ** Examples
> 
> grow(100000, .075, n=8)
[1] 178347.8
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("grow", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("income.driven")
> ### * income.driven
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: income.driven
> ### Title: A Loan Forgiveness Function
> ### Aliases: income.driven
> ### Keywords: income interest,
> 
> ### ** Examples
> 
> income <- c(65000,65000,65000,65000,65000, 353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000)
> income.driven(400000,.075,income, plan=20)
[1] 545732.1
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("income.driven", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("income.driven.vector")
> ### * income.driven.vector
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: income.driven.vector
> ### Title: A Vectorized Loan Forgiveness Function
> ### Aliases: income.driven.vector
> ### Keywords: income interest,
> 
> ### ** Examples
> 
> income <- c(65000,65000,65000,65000,65000, 353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000, 353000,353000)
> income.driven.vector(400000,.075,income, plan=20)
 [1] 423012.5 447750.9 474344.8 502933.1 533665.6 535743.0 537976.2 540377.0
 [9] 542957.7 545732.1 548714.5 551920.6 555367.1 559072.1 563055.0 567336.7
[17] 571939.4 576887.4 582206.4 587924.4
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("income.driven.vector", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("pay.per.year")
> ### * pay.per.year
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: pay.per.year
> ### Title: A Pay Per Year Function
> ### Aliases: pay.per.year
> ### Keywords: debt, interest
> 
> ### ** Examples
> 
> pay.per.year(400000, .075, 3, years = 20)
[1] 8
[1] 615247.9
[1] 442275.2 383533.3 320385.8 252502.2 179527.4 101079.4  16747.9      0.0
[1] 8
[1] 625706.1
[1] 446870.78 393069.21 335232.53 273058.10 206220.58 134370.25  57131.14
[8]      0.00
[1] 9
[1] 637016.3
[1] 451236.62 402128.34 349336.93 292586.17 231579.11 165996.51  95495.21
[8]  19706.32      0.00
[1] 9
[1] 649477.7
[1] 455384.18 410734.51 362736.12 311137.85 255669.71 196041.46 131941.08
[8]  63033.19      0.00
[1] 10
[1] 663907.5
 [1] 459324.35 418910.37 375465.34 328761.94 278555.78 224584.16 166564.66
 [8] 104193.71  37144.93      0.00
[1] 11
[1] 679605.1
 [1] 463067.52 426677.44 387558.11 345504.82 300297.55 251699.72 199457.06
 [8] 143296.20  82923.27  18022.38      0.00
[1] 12
[1] 697244
 [1] 466623.523 434056.154 399046.232 361410.566 320952.225 277459.508
 [7] 230704.838 180443.567 126412.702  68329.521   5890.102      0.000
[1] 13
[1] 717501
 [1] 470001.730 441065.933 409959.951 376521.020 340574.170 301931.306
 [7] 260390.227 215733.568 167727.659 116121.306  60644.477   1006.887
[13]      0.000
[1] 14
[1] 741059.3
 [1] 473211.026 447725.222 420327.984 390875.952 359215.018 325179.514
 [7] 288591.347 249259.068 206976.868 161523.502 112661.135  60134.089
[13]   3667.516      0.000
[1] 15
[1] 768613.2
 [1] 476259.9 454051.5 430177.6 404513.1 376923.8 347265.3 315382.4 281108.3
 [9] 244263.6 204655.6 162077.0 116304.9  67100.0  14204.7      0.0
[1] 16
[1] 800871.4
 [1] 479156.25 460061.56 439534.76 417468.46 393747.19 368246.82 340833.92
 [8] 311365.06 279686.03 245631.07 209021.99 169667.23 127360.87  81881.52
[15]  32991.23      0.00
[1] 18
[1] 839446.5
 [1] 481907.82 465771.07 448424.06 429776.02 409729.39 388179.25 365012.86
 [8] 340108.98 313337.32 284557.78 253619.77 220361.42 184608.69 146174.50
[15] 104857.75  60442.24  12695.57      0.00
[1] 48632.41
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("pay.per.year", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("payments")
> ### * payments
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: payments
> ### Title: A Payments Function
> ### Aliases: payments
> ### Keywords: debt, interest
> 
> ### ** Examples
> 
> payments(100000, .075, 10000)
[1] 17
[1] 165499
 [1] 96750.000 93256.250 89500.469 85463.004 81122.729 76456.934 71441.204
 [8] 66049.294 60252.991 54021.966 47323.613 40122.884 32382.100 24060.758
[15] 15115.315  5498.963     0.000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("payments", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("specialty_res")
> ### * specialty_res
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: specialty_res
> ### Title: A Length of Residency Function
> ### Aliases: specialty_res
> ### Keywords: residency, specialty
> 
> ### ** Examples
> 
> specialty_res("Internal Medicine")
[1] 3
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("specialty_res", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("specialty_salary")
> ### * specialty_salary
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: specialty_salary
> ### Title: A Specialty Salary Function
> ### Aliases: specialty_salary
> ### Keywords: residency, salary specialty,
> 
> ### ** Examples
> 
> specialty_salary("Internal Medicine")
[1] 230000
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("specialty_salary", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.139 0.015 0.157 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
